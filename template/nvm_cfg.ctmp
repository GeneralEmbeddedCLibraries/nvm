// Copyright (c) 2023 Ziga Miklosic
// All Rights Reserved
// This software is under MIT licence (https://opensource.org/licenses/MIT)
////////////////////////////////////////////////////////////////////////////////
/**
*@file      nvm_cfg.c
*@brief     Non-Volatile memory configuration
*@author    Ziga Miklosic
*@date      15.02.2023
*@version	V2.1.0
*/
////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup NVM
* @{ <!-- BEGIN GROUP -->
*
* 	Non-volatile memory configuration, dividing into regions.
*
* 	Put code that is platform depended inside code block start with
* 	"USER_CODE_BEGIN" and with end of "USER_CODE_END".
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include "nvm_cfg.h"
#include "nvm/src/nvm.h"

// USER CODE BEGIN...

#include "drivers/peripheral/flash/flash.h"

// USER CODE END...

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

/**
 * 	NVM low-level memory driver
 *
 * 	@brief	User shall specified low level memory drivers API functions
 * 			for defined memory driver.
 *
 * 			Each driver expect four functions: init, write, read and erase with
 * 			exact predefined function prototypes.
 *
 * 	@note	It is important that low level driver return status has the same
 * 			interface. Rule is that 0 means OK, non-zero values means error
 * 			codes. For know NVM module is written that detects only
 * 			error code by checking for 0 return code as enumeration type.
 *
 *
 */
static const nvm_mem_driver_t g_mem_driver[ eNVM_MEM_DRV_NUM_OF ]=
{
	// USER CODE BEGIN...

	// EEPROM LOW LEVEL MEMORY DRIVERS
	[eNVM_MEM_DRV_INT_FLASH ] = 
	{
        // Interface
		.pf_nvm_init   = (nvm_status_t (*)(void))																	flash_init,
		.pf_nvm_deinit = (nvm_status_t (*)(void))																	flash_deinit,
		.pf_nvm_write  = (nvm_status_t (*)(const uint32_t addr, const uint32_t size, const uint8_t * const p_data)) flash_write,
		.pf_nvm_read   = (nvm_status_t (*)(const uint32_t addr, const uint32_t size, uint8_t * const p_data))		flash_read,
		.pf_nvm_erase  = (nvm_status_t (*)(const uint32_t addr, const uint32_t size))								flash_erase,

        // Enable EEPROM emulation
        .ee_en = true,
	},

	// User shall add more here if needed...


	// USER CODE END...
};

/**
 * 		NVM region definitions
 *
 *	@brief	User shall specified NVM regions name, start, size
 *			and pointer to low level driver.
 *
 * 	@note	Special care with start address and its size!
 */
static const nvm_region_t g_nvm_region[ eNVM_REGION_NUM_OF ] =
{
	// USER CODE BEGIN...

	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//											Region Name                 Start address                           Size [byte]			Low level driver
	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	[eNVM_REGION_INT_FLASH_DEV_PAR]	=	{	.name = "Device Parameters",    .start_addr = ( 0x000F7000U ),           .size = 0x400U,		.p_driver = &g_mem_driver[ eNVM_MEM_DRV_INT_FLASH ]	},
	[eNVM_REGION_INT_FLASH_CLI]		=	{	.name = "CLI settings",			.start_addr = ( 0x000F7000U + 0x400U ),  .size = 0x100U,		.p_driver = &g_mem_driver[ eNVM_MEM_DRV_INT_FLASH ]	},

	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// User shall add more here if needed...

	// USER CODE END...
};

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*		Get configuration of NVM memory drivers
*
* @return	Pointer to NVM memory drivers configuration table
*/
////////////////////////////////////////////////////////////////////////////////
const void * nvm_cfg_get_drivers(void)
{
    return (const nvm_mem_driver_t*) &g_mem_driver;  
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Get configuration of NVM regions
*
* @return	Pointer to NVM memory regions configuration table
*/
////////////////////////////////////////////////////////////////////////////////
const void * nvm_cfg_get_regions(void)
{
	return (const nvm_region_t*) &g_nvm_region;
}

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
