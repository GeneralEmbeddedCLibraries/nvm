// Copyright (c) 2023 Ziga Miklosic
// All Rights Reserved
// This software is under MIT licence (https://opensource.org/licenses/MIT)
////////////////////////////////////////////////////////////////////////////////
/**
*@file      nvm_if.h
*@brief     Non-Volatile memory interface file
*@author    Ziga Miklosic
*@date      15.02.2023
*@version	V2.1.0
*/
////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup NVM IF
* @{ <!-- BEGIN GROUP -->
*
*
* 	Put code that is platform depended inside code block start with
* 	"USER_CODE_BEGIN" and with end of "USER_CODE_END".
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include "nvm_if.h"

// USER CODE BEGIN...


// USER CODE END...

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

// USER DEFINITIONS BEGIN...


// USER DEFINITIONS END...

////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

// USER VARIABLES BEGIN...


// USER VARIABLES END...

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*		Initialize low level interface
*
* @note	User shall provide definition of that function based on used platform!
*
* @return 		status - Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
nvm_status_t nvm_if_init(void)
{
	nvm_status_t status = eNVM_OK;

	// USER CODE BEGIN...

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Acquire mutex
*
* @note	User shall provide definition of that function based on used platform!
*
*		If not being used leave empty.
*
*		This function does not have an affect if "NVM_CFG_MUTEX_EN"
* 		is set to 0.
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
nvm_status_t nvm_if_aquire_mutex(void)
{
	nvm_status_t status = eNVM_OK;

	// USER CODE BEGIN...

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Release mutex
*
* @note	User shall provide definition of that function based on used platform!
*
*		If not being used leave empty.
*
*		This function does not have an affect if "NVM_CFG_MUTEX_EN"
* 		is set to 0.
*
* @return 		status - Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
nvm_status_t nvm_if_release_mutex(void)
{
	nvm_status_t status = eNVM_OK;

	// USER CODE BEGIN...

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
