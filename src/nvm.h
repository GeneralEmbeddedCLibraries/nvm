////////////////////////////////////////////////////////////////////////////////
/**
*@file      nvm.h
*@brief     Non-Volatile memory
*@author    Ziga Miklosic
*@date      04.06.2021
*@version	V1.0.0
*/
////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup NVM
* @{ <!-- BEGIN GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

#ifndef _NVM_H_
#define _NVM_H_

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <stdint.h>
#include <stdbool.h>

#include "../../nvm_cfg.h"


////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

/**
 * 	Status
 */
typedef enum
{
	eNVM_OK 	= 0,		/**<Normal operation */
	eNVM_ERROR	= 0x01,		/**<General error */

} nvm_status_t;




////////////////////////////////////////////////////////////////////////////////
// Functions Prototypes
////////////////////////////////////////////////////////////////////////////////
nvm_status_t 	nvm_init	(void);
bool			nvm_is_init	(void);
nvm_status_t 	nvm_write	(const uint8_t driver, const uint8_t region, const uint32_t addr, const uint32_t size, const uint8_t * const p_data);
nvm_status_t 	nvm_read	(const uint8_t driver, const uint8_t region, const uint32_t addr, const uint32_t size, uint8_t * const p_data);
nvm_status_t 	nvm_erase	(const uint8_t driver, const uint8_t region, const uint32_t addr, const uint32_t size);

#endif // _NVM_H_
